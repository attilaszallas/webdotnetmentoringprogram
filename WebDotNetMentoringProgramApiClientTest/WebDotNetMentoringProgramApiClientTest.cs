// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure;
using Azure.Core;

namespace WebDotNetMentoringProgramApiClient
{
    public class WebDotNetMentoringProgramClientTests
    {
        private const string _testImagePath = "all_gray.bmp";

        private string TestImageBase64String
        {
            get { return ReadImageFileAndConvertToBase64String(_testImagePath); }
        }

        [Test]
        public void Example_GetCategories()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = client.GetCategories();
            Console.WriteLine(response.Status);
        }

        [Test]
        public void Example_GetCategories_AllParameters()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = client.GetCategories(new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_GetCategories_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = await client.GetCategoriesAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_GetCategories_AllParameters_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = await client.GetCategoriesAsync(new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        public void Example_GetImageById()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = client.GetImageById(1);
            Console.WriteLine(response.Status);
        }

        [Test]
        public void Example_GetImageById_AllParameters()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = client.GetImageById(1, new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_GetImageById_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = await client.GetImageByIdAsync(1);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_GetImageById_AllParameters_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = await client.GetImageByIdAsync(1, new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        public void Example_UpdateImage()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = client.UpdateImage(1, TestImageBase64String);
            Console.WriteLine(response.Status);
        }

        [Test]
        public void Example_UpdateImage_AllParameters()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = client.UpdateImage(1, TestImageBase64String, new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_UpdateImage_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = await client.UpdateImageAsync(1, TestImageBase64String);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_UpdateImage_AllParameters_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = await client.UpdateImageAsync(1, TestImageBase64String, new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        public void Example_GetProducts()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = client.GetProducts();
            Console.WriteLine(response.Status);
        }

        [Test]
        public void Example_GetProducts_AllParameters()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = client.GetProducts(new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_GetProducts_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = await client.GetProductsAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_GetProducts_AllParameters_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            Response response = await client.GetProductsAsync(new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        public void Example_CreateProduct()
        {
            var client = new WebDotNetMentoringProgramClient();

            var data = new { };

            Response response = client.CreateProduct(RequestContent.Create(data), ContentType.ApplicationJson);
            Console.WriteLine(response.Status);
        }

        [Test]
        public void Example_CreateProduct_AllParameters()
        {
            var client = new WebDotNetMentoringProgramClient();

            var data = new
            {
                productID = 1234,
                productName = "<productName>",
                supplierID = 1234,
                categoryID = 1234,
                quantityPerUnit = "<quantityPerUnit>",
                unitPrice = 123.45d,
                unitsInStock = 1234,
                unitsOnOrder = 1234,
                reorderLevel = 1234,
                discontinued = true,
            };

            Response response = client.CreateProduct(RequestContent.Create(data), ContentType.ApplicationJson, new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_CreateProduct_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            var data = new { };

            Response response = await client.CreateProductAsync(RequestContent.Create(data), ContentType.ApplicationJson);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_CreateProduct_AllParameters_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            var data = new
            {
                productID = 1234,
                productName = "<productName>",
                supplierID = 1234,
                categoryID = 1234,
                quantityPerUnit = "<quantityPerUnit>",
                unitPrice = 123.45d,
                unitsInStock = 1234,
                unitsOnOrder = 1234,
                reorderLevel = 1234,
                discontinued = true,
            };

            Response response = await client.CreateProductAsync(RequestContent.Create(data), ContentType.ApplicationJson, new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        public void Example_UpdateProduct()
        {
            var client = new WebDotNetMentoringProgramClient();

            var data = new { };

            Response response = client.UpdateProduct(RequestContent.Create(data), ContentType.ApplicationJson);
            Console.WriteLine(response.Status);
        }

        [Test]
        public void Example_UpdateProduct_AllParameters()
        {
            var client = new WebDotNetMentoringProgramClient();

            var data = new
            {
                productID = 1234,
                productName = "<productName>",
                supplierID = 1234,
                categoryID = 1234,
                quantityPerUnit = "<quantityPerUnit>",
                unitPrice = 123.45d,
                unitsInStock = 1234,
                unitsOnOrder = 1234,
                reorderLevel = 1234,
                discontinued = true,
            };

            Response response = client.UpdateProduct(RequestContent.Create(data), ContentType.ApplicationJson, new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_UpdateProduct_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            var data = new { };

            Response response = await client.UpdateProductAsync(RequestContent.Create(data), ContentType.ApplicationJson);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_UpdateProduct_AllParameters_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            var data = new
            {
                productID = 1234,
                productName = "<productName>",
                supplierID = 1234,
                categoryID = 1234,
                quantityPerUnit = "<quantityPerUnit>",
                unitPrice = 123.45d,
                unitsInStock = 1234,
                unitsOnOrder = 1234,
                reorderLevel = 1234,
                discontinued = true,
            };

            Response response = await client.UpdateProductAsync(RequestContent.Create(data), ContentType.ApplicationJson, new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        public void Example_DeleteProduct()
        {
            var client = new WebDotNetMentoringProgramClient();

            var data = new
            {
                productID = 1234,
                productName = "<productName>",
                supplierID = 1234,
                categoryID = 1234,
                quantityPerUnit = "<quantityPerUnit>",
                unitPrice = 123.45d,
                unitsInStock = 1234,
                unitsOnOrder = 1234,
                reorderLevel = 1234,
                discontinued = true,
            };

            client.CreateProduct(RequestContent.Create(data), ContentType.ApplicationJson);
            Response response = client.DeleteProduct(RequestContent.Create(data), ContentType.ApplicationJson);
            Console.WriteLine(response.Status);
        }

        [Test]
        public void Example_DeleteProduct_AllParameters()
        {
            var client = new WebDotNetMentoringProgramClient();

            var data = new
            {
                productID = 1234,
                productName = "<productName>",
                supplierID = 1234,
                categoryID = 1234,
                quantityPerUnit = "<quantityPerUnit>",
                unitPrice = 123.45d,
                unitsInStock = 1234,
                unitsOnOrder = 1234,
                reorderLevel = 1234,
                discontinued = true,
            };

            client.CreateProduct(RequestContent.Create(data), ContentType.ApplicationJson);
            Response response = client.DeleteProduct(RequestContent.Create(data), ContentType.ApplicationJson, new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_DeleteProduct_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            var data = new
            {
                productID = 1234,
                productName = "<productName>",
                supplierID = 1234,
                categoryID = 1234,
                quantityPerUnit = "<quantityPerUnit>",
                unitPrice = 123.45d,
                unitsInStock = 1234,
                unitsOnOrder = 1234,
                reorderLevel = 1234,
                discontinued = true,
            };

            client.CreateProduct(RequestContent.Create(data), ContentType.ApplicationJson);
            Response response = await client.DeleteProductAsync(RequestContent.Create(data), ContentType.ApplicationJson);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Example_DeleteProduct_AllParameters_Async()
        {
            var client = new WebDotNetMentoringProgramClient();

            var data = new
            {
                productID = 1234,
                productName = "<productName>",
                supplierID = 1234,
                categoryID = 1234,
                quantityPerUnit = "<quantityPerUnit>",
                unitPrice = 123.45d,
                unitsInStock = 1234,
                unitsOnOrder = 1234,
                reorderLevel = 1234,
                discontinued = true,
            };

            Response response = await client.DeleteProductAsync(RequestContent.Create(data), ContentType.ApplicationJson, new RequestContext());
            Console.WriteLine(response.Status);
        }

        private string ReadImageFileAndConvertToBase64String(string testImageFilePath)
        {
            byte[] imageAsBytes = File.ReadAllBytes(testImageFilePath);
            return Convert.ToBase64String(imageAsBytes);
        }
    }
}
